import logging
import requests
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# BOT TOKEN
API_TOKEN = "TOKEN"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

user_cookies = {}

# Deleted Friends Storage
deleted_friends = set()

class UnfriendStates(StatesGroup):
    waiting_for_cookie = State()
    waiting_for_user_id = State()

def get_user_info(cookie):
    url = "https://users.roblox.com/v1/users/authenticated"
    headers = {
        "Content-Type": "application/json",
        "Cookie": f".ROBLOSECURITY={cookie}",
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()
    elif response.status_code == 401:
        raise Exception("–û—à–∏–±–∫–∞: –ö—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É–∫–∏. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {response.status_code}, {response.text}")

def get_friends(cookie, roblox_user_id):
    url = f"https://friends.roblox.com/v1/users/{roblox_user_id}/friends"
    headers = {
        "Content-Type": "application/json",
        "Cookie": f".ROBLOSECURITY={cookie}",
    }
    response = requests.get(url, headers=headers)
    if response.status_code == 200:
        return response.json()["data"]
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: {response.status_code}, {response.text}")

def get_avatar_thumbnail(user_id):
    url = f"https://thumbnails.roblox.com/v1/users/avatar-headshot?userIds={user_id}&size=150x150&format=Png&isCircular=false"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        if "data" in data and data["data"]:
            return data["data"][0]["imageUrl"]
        else:
            raise Exception("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–º–±–Ω–µ–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ç–∞–º–±–Ω–µ–π–ª–∞: {response.status_code}, {response.text}")

def unfriend_user(cookie, target_user_id, user_id):
    url = f"https://friends.roblox.com/v1/users/{target_user_id}/unfriend"
    csrf_tokens = {}
    csrf_token = csrf_tokens.get(user_id, "")

    headers = {
        "Content-Type": "application/json",
        "Cookie": f".ROBLOSECURITY={cookie}",
        "X-CSRF-TOKEN": csrf_token,
    }

    response = requests.post(url, headers=headers)
    if response.status_code == 403 and "x-csrf-token" in response.headers:
        csrf_token = response.headers["x-csrf-token"]
        csrf_tokens[user_id] = csrf_token
        headers["X-CSRF-TOKEN"] = csrf_token
        response = requests.post(url, headers=headers)

    if response.status_code == 200:
        return f"–î—Ä—É–≥ —Å ID {target_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω."
    elif response.status_code == 400:
        return f"–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}."
    elif response.status_code == 403:
        return "–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫—É–∫–∏."
    elif response.status_code == 401:
        return "–û—à–∏–±–∫–∞: –ö—É–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É–∫–∏."
    elif response.status_code == 404:
        return f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω."
    else:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {response.status_code}, –û—Ç–≤–µ—Ç: {response.text}"

@dp.message(Command("start"))
async def send_welcome(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª /start.")

    start_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üç™ –û—Ç–ø—Ä–∞–≤–∏—Ç—å Cookie", callback_data="send_cookie")]
    ])

    await message.reply(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑—å—è–º–∏ Roblox!\n\n"
        "–° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "1Ô∏è‚É£ –£–¥–∞–ª—è—Ç—å –¥—Ä—É–∑–µ–π.\n"
        "2Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫—É–∫–∏.",
        reply_markup=start_keyboard
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "send_cookie")
async def ask_for_cookie(callback_query: types.CallbackQuery, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –Ω–∞–∂–∞–ª '–û—Ç–ø—Ä–∞–≤–∏—Ç—å Cookie'.")

    await callback_query.message.reply(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫—É–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n<code>_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|</code>",
        parse_mode="HTML"
    )
    await state.set_state(UnfriendStates.waiting_for_cookie)
    await callback_query.answer()

@dp.message(UnfriendStates.waiting_for_cookie)
async def handle_cookies(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    cookie = message.text.strip()
    if cookie.startswith(".ROBLOSECURITY="):
        cookie = cookie[len(".ROBLOSECURITY="):]

    user_id = message.from_user.id
    try:
        user_info = get_user_info(cookie)
        user_name = user_info["name"]
        roblox_user_id = user_info["id"]

        user_cookies[user_id] = {"cookie": cookie, "roblox_user_id": roblox_user_id}

        friends_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë• –î—Ä—É–∑—å—è", callback_data="show_friends")]
        ])

        avatar_url = get_avatar_thumbnail(roblox_user_id)

        await message.reply_photo(
            photo=avatar_url,
            caption=(
                f"–í–∞—à–∏ –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ:\n"
                f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n"
                f"üÜî ID: {roblox_user_id}\n\n"
                f"–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ '–î—Ä—É–∑—å—è', —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫."
            ),
            reply_markup=friends_button
        )
        await state.set_state(UnfriendStates.waiting_for_user_id)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—É–∫–∏: {e}")
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data == "show_friends")
async def show_friends(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_cookies:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.")
        return

    try:
        cookie = user_cookies[user_id]["cookie"]
        roblox_user_id = user_cookies[user_id]["roblox_user_id"]

        friends = get_friends(cookie, roblox_user_id)

        if not friends:
            await callback_query.message.reply("–£ –≤–∞—Å –Ω–µ—Ç –¥—Ä—É–∑–µ–π.")
            return

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"–£–¥–∞–ª–∏—Ç—å {friend['displayName']} (@{friend['name']})",
                callback_data=f"delete_{friend['id']}"
            )] for friend in friends
        ])

        await callback_query.message.reply("üë• –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π. –ù–∞–∂–º–∏—Ç–µ '–£–¥–∞–ª–∏—Ç—å', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞:", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π: {e}")
        await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@dp.callback_query(lambda c: c.data.startswith("delete_"))
async def delete_friend(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id not in user_cookies:
        await callback_query.message.reply("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫—É–∫–∏, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞.")
        return

    try:
        target_user_id = int(callback_query.data.split("_")[1])
        if target_user_id in deleted_friends:
            await callback_query.answer("–≠—Ç–æ—Ç –¥—Ä—É–≥ —É–∂–µ –±—ã–ª —É–¥–∞–ª–µ–Ω.", show_alert=True)
            return

        cookie = user_cookies[user_id]["cookie"]

        url = f"https://users.roblox.com/v1/users/{target_user_id}"
        headers = {
            "Content-Type": "application/json",
            "Cookie": f".ROBLOSECURITY={cookie}",
        }
        response = requests.get(url, headers=headers)
        if response.status_code == 200:
            friend_info = response.json()
            friend_name = friend_info["name"]
            friend_display_name = friend_info.get("displayName", friend_name)
            avatar_url = get_avatar_thumbnail(target_user_id)
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥—Ä—É–≥–µ.")

        result = unfriend_user(cookie, target_user_id, user_id)

        deleted_friends.add(target_user_id)

        await callback_query.answer()
        await callback_query.message.reply_photo(
            photo=avatar_url,
            caption=(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:\n"
                f"üë§ –ù–∏–∫–Ω–µ–π–º: {friend_display_name} (@{friend_name})\n"
                f"üÜî ID: {target_user_id}\n\n"
                f"{result}"
            )
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞: {e}")
        await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())